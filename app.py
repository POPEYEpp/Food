import streamlit as st
import pandas as pd

# ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
@st.cache_data
def load_data():
    file_path = "C:/Users/informatics/Desktop/65160401/17/Lineman_Shops_Final_Clean.csv"  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô path ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
    df = pd.read_csv(file_path)
    return df

df = load_data()

# Inject custom CSS styling (‡∏ò‡∏µ‡∏° Dark Mode ‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà)
st.markdown("""
    <style>
        /* ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ Google Fonts (Poppins) */
        @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&display=swap');
        
        /* ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ background ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô gradient ‡πÅ‡∏ö‡∏ö Dark */
        html, body {
            background: linear-gradient(135deg, #2c3e50, #000000);
            font-family: 'Poppins', sans-serif;
            color: #f1f1f1;
            margin: 0;
            padding: 0;
        }
        
        /* ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á Streamlit ‡πÇ‡∏õ‡∏£‡πà‡∏á‡πÉ‡∏™ */
        .css-18e3th9 {
            background-color: transparent;
        }
        
        /* ‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á sidebar ‡πÉ‡∏´‡πâ‡∏°‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÅ‡∏ö‡∏ö‡πÇ‡∏õ‡∏£‡πà‡∏á‡πÅ‡∏™‡∏á‡πÉ‡∏ô‡∏ò‡∏µ‡∏°‡∏°‡∏∑‡∏î */
        .css-1d391kg {
            background-color: rgba(0, 0, 0, 0.7);
            border-radius: 10px;
            padding: 20px;
        }
        
        /* ‡∏™‡πÑ‡∏ï‡∏•‡πå‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏´‡∏•‡∏±‡∏Å */
        h1 {
            color: #e67e22;
            text-align: center;
            margin-top: 40px;
            text-shadow: 2px 2px 8px rgba(0, 0, 0, 0.8);
        }
        
        /* ‡∏™‡πÑ‡∏ï‡∏•‡πå‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå (restaurant card) */
        .restaurant-card {
            background: rgba(44, 62, 80, 0.85);
            border-radius: 10px;
            padding: 20px;
            margin: 20px 0;
            box-shadow: 0 4px 12px rgba(0,0,0,0.5);
            transition: transform 0.3s, box-shadow 0.3s;
        }
        .restaurant-card:hover {
            transform: scale(1.03);
            box-shadow: 0 6px 16px rgba(0,0,0,0.7);
        }
        .restaurant-card h3 {
            color: #e67e22;
            margin-bottom: 10px;
        }
        
        /* ‡∏™‡πÑ‡∏ï‡∏•‡πå‡∏Ç‡∏≠‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå */
        a {
            color: #3498db;
            text-decoration: none;
            font-weight: 600;
        }
        a:hover {
            text-decoration: underline;
        }
        
        /* ‡∏™‡πÑ‡∏ï‡∏•‡πå‡∏Ç‡∏≠‡∏á‡∏õ‡∏∏‡πà‡∏° */
        .stButton > button {
            background-color: #e67e22;
            color: #ffffff;
            border: none;
            padding: 10px 20px;
            border-radius: 8px;
            font-size: 1em;
            cursor: pointer;
            transition: background-color 0.3s;
        }
        .stButton > button:hover {
            background-color: #d35400;
        }
    </style>
""", unsafe_allow_html=True)

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏•‡∏¥‡∏á‡∏Å‡πå URL
def format_url(name, url):
    if pd.isna(url) or url.strip() in ["-", ""]:
        return f"https://www.google.com/search?q={name} ‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£"
    return url

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏£‡πâ‡∏≤‡∏ô‡∏ï‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á (‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏µ‡∏¢‡∏á "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏≠‡∏≤‡∏´‡∏≤‡∏£" ‡πÅ‡∏•‡∏∞ "‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤")
def recommend_restaurants(category, price_level, top_n=5):
    filtered_df = df[df["category"].str.contains(category, na=False, case=False)]
    filtered_df = filtered_df[filtered_df["price_level"] == price_level]
    results = []
    for _, row in filtered_df.head(top_n).iterrows():
        paragraph = f"""
        <div class="restaurant-card">
            <h3>üçΩ {row['name']}</h3>
            <p>
                <strong>‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà:</strong> {row['category']}<br>
                <strong>‡∏£‡∏≤‡∏Ñ‡∏≤:</strong> {row['price_level']}<br>
                üîó <a href="{format_url(row['name'], row['url'])}" target="_blank">‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°</a>
            </p>
        </div>
        """
        results.append(paragraph)
    return results if results else ["<div class='restaurant-card'>‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡πâ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç</div>"]

# ‡∏™‡∏£‡πâ‡∏≤‡∏á UI ‡∏î‡πâ‡∏ß‡∏¢ Streamlit
st.title("üçΩÔ∏è ‡πÄ‡∏¢‡πá‡∏ô‡∏ô‡∏µ‡πâ‡∏Å‡∏¥‡∏ô‡∏≠‡∏∞‡πÑ‡∏£‡∏î‡∏µ?")
st.sidebar.header("üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£")

# ‡πÄ‡∏≠‡∏≤‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ
category = st.selectbox("üçú ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏≠‡∏≤‡∏´‡∏≤‡∏£", df["category"].dropna().unique())
price_level = st.selectbox("üí∞ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤", df["price_level"].unique())

if st.button("üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£"):
    results = recommend_restaurants(category, price_level)
    for res in results:
        st.markdown(res, unsafe_allow_html=True)

st.sidebar.markdown("### üì¢ ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ")
st.sidebar.write("""
- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏≠‡∏≤‡∏´‡∏≤‡∏£ ‡πÅ‡∏•‡∏∞‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤
- ‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç
- ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
""")
